{"version":3,"sources":["index.js","src\\storage\\index.js","src\\utils\\httpRequest.js","src\\utils\\auth.js","package.json","src\\db\\index.js","src\\db\\db.js","src\\db\\geo\\index.js","src\\db\\geo\\point.js","src\\db\\validate.js","src\\db\\constant.js","src\\db\\util.js","src\\db\\serverDate\\index.js","src\\db\\helper\\symbol.js","src\\db\\utils\\symbol.js","src\\db\\utils\\type.js","src\\db\\geo\\lineString.js","src\\db\\geo\\polygon.js","src\\db\\geo\\multiPoint.js","src\\db\\geo\\multiLineString.js","src\\db\\geo\\multiPolygon.js","src\\db\\collection.js","src\\db\\document.js","src\\db\\request.js","src\\db\\serializer\\update.js","src\\db\\commands\\update.js","src\\db\\operator-map.js","src\\db\\commands\\query.js","src\\db\\commands\\logic.js","src\\db\\serializer\\common.js","src\\db\\serializer\\datatype.js","src\\db\\query.js","src\\db\\serializer\\query.js","src\\db\\command.js","src\\db\\regexp\\index.js","src\\functions\\index.js","src\\wx\\index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,ACHA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ADGA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,AFMA,AJYA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ANkBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ANkBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,APqBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,APqBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,APqBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AENA,ACHA,ACHA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,ACHA,ACHA,ACHA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AGTA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AGTA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AGTA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AIZA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AIZA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AIZA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AENA,AKfA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AU9BA,ARwBA,AKfA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AJYA,AU9BA,ARwBA,AKfA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,ARwBA,AKfA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,ARwBA,AS3BA,AJYA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,ARwBA,AS3BA,AJYA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,ARwBA,AS3BA,AJYA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AENA,AV8BA,AS3BA,AJYA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AENA,AV8BA,AS3BA,AJYA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AENA,AV8BA,AS3BA,AJYA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AGTA,ADGA,AV8BA,AS3BA,AJYA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AGTA,ADGA,AV8BA,AS3BA,AJYA,ADGA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AGTA,ADGA,AV8BA,AS3BA,ALeA,ADGA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AMlBA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,ANkBA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AZoCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AZoCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AZoCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AMlBA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AGTA,ALeA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AMlBA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AiBnDA,AMlBA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AFMA,ARwBA,AENA,ADGA;AFOA,AIZA,AwBxEA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AV8BA,AENA,ADGA;AFOA,AIZA,AwBxEA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AV8BA,AENA,ADGA;AFOA,AIZA,AwBxEA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,ACHA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,AMlBA,ALeA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,AMlBA,ALeA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,AMlBA,ALeA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,AMlBA,ACHA,ANkBA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,AMlBA,ACHA,ANkBA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AHSA,AMlBA,ACHA,ANkBA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,ANkBA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,ANkBA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,ANkBA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;AFOA,A4BpFA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;A0B7EA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AKfA,ARwBA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AV8BA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,ANkBA,AGTA,ACHA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,AHSA,ACHA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,AHSA,ACHA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA;A+B5FA,ALeA,ADGA,AFMA,AHSA,AHSA,ACHA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AHSA,ACHA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AHSA,ACHA,AHSA,Ac1CA,AGTA,AXiCA,AMlBA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AHSA,ACHA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AHSA,ACHA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AHSA,ACHA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AHSA,Ac1CA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AFMA,AWjCA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AS3BA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AS3BA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,AFMA,AHSA,AS3BA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AGTA,ALeA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AbuCA,AwBxEA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,ADGA,AkCtGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,ACHA,AENA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ALeA,ADGA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AWjCA,AlCsGA,AENA,AiCnGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AENA,AiCnGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA,AmCzGA;AHUA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA;AgC/FA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA;AgC/FA,ANkBA,ALeA,AS3BA,AFMA,AGTA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;A0B7EA,ALeA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,ARwBA,AvBqEA;AqB9DA,AS3BA,ACHA,A/B6FA;AqB9DA,AS3BA,ACHA,A/B6FA;AqB9DA,AS3BA,ACHA,A/B6FA;AqB9DA,AS3BA,ACHA,A/B6FA;Aqfile":"index.js","sourcesContent":["const storage = require(\"./src/storage\");\r\nconst database = require(\"./src/db\").Db;\r\nconst functions = require(\"./src/functions\");\r\nconst wx = require(\"./src/wx\");\r\n\r\nfunction Tcb(config) {\r\n  this.config = config ? config : this.config;\r\n}\r\n\r\nTcb.prototype.init = function({\r\n  secretId,\r\n  secretKey,\r\n  sessionToken,\r\n  env,\r\n  proxy,\r\n  timeout,\r\n  serviceUrl,\r\n  isHttp\r\n} = {}) {\r\n  if ((secretId && !secretKey) || (!secretId && secretKey)) {\r\n    throw Error(\"secretId and secretKey must be a pair\");\r\n  }\r\n\r\n  this.config = {\r\n    get secretId() {\r\n      return this._secretId\r\n        ? this._secretId\r\n        : process.env.TENCENTCLOUD_SECRETID;\r\n    },\r\n    set secretId(id) {\r\n      this._secretId = id;\r\n    },\r\n    get secretKey() {\r\n      return this._secretKey\r\n        ? this._secretKey\r\n        : process.env.TENCENTCLOUD_SECRETKEY;\r\n    },\r\n    set secretKey(key) {\r\n      this._secretKey = key;\r\n    },\r\n    get sessionToken() {\r\n      if (this._sessionToken === undefined) {\r\n        //默认临时密钥\r\n        return process.env.TENCENTCLOUD_SESSIONTOKEN;\r\n      } else if (this._sessionToken === false) {\r\n        //固定秘钥\r\n        return undefined;\r\n      } else {\r\n        //传入的临时密钥\r\n        return this._sessionToken;\r\n      }\r\n    },\r\n    set sessionToken(token) {\r\n      this._sessionToken = token;\r\n    },\r\n    envName: env,\r\n    proxy: proxy,\r\n    isHttp\r\n  };\r\n\r\n  this.config.secretId = secretId;\r\n  this.config.secretKey = secretKey;\r\n  this.config.timeout = timeout || 15000;\r\n  this.config.serviceUrl = serviceUrl;\r\n  this.config.sessionToken = sessionToken\r\n    ? sessionToken\r\n    : secretId && secretKey\r\n    ? false\r\n    : undefined;\r\n\r\n  return new Tcb(this.config);\r\n};\r\n\r\nTcb.prototype.database = function(dbConfig) {\r\n  return new database({ ...this, ...dbConfig });\r\n};\r\n\r\nfunction each(obj, fn) {\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      fn(obj[i], i);\r\n    }\r\n  }\r\n}\r\n\r\nfunction extend(target, source) {\r\n  each(source, function(val, key) {\r\n    target[key] = source[key];\r\n  });\r\n  return target;\r\n}\r\n\r\nextend(Tcb.prototype, functions);\r\nextend(Tcb.prototype, storage);\r\nextend(Tcb.prototype, wx);\r\n\r\nmodule.exports = new Tcb();\r\n","const request = require(\"request\");\r\nconst fs = require('fs');\r\nconst httpRequest = require(\"../utils/httpRequest\");\r\n\r\n/*\r\n * 上传文件\r\n * @param {string} cloudPath 上传后的文件路径\r\n * @param {fs.ReadStream} fileContent  上传文件的二进制流\r\n */\r\nfunction uploadFile({ cloudPath, fileContent }, { onResponseReceived } = {}) {\r\n  let params = {\r\n    action: \"storage.uploadFile\",\r\n    path: cloudPath,\r\n    file: fileContent\r\n  };\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      // \"content-type\": \"multipart/form-data\"\r\n    },\r\n    callback: (response) => {\r\n      onResponseReceived && typeof onResponseReceived === 'function' && onResponseReceived(response)\r\n    }\r\n  }).then((res) => {\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      return {\r\n        fileID: res.data.fileID,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 删除文件\r\n * @param {Array.<string>} fileList 文件id数组\r\n */\r\nasync function deleteFile({ fileList }) {\r\n  if (!fileList || !Array.isArray(fileList)) {\r\n    return {\r\n      code: \"INVALID_PARAM\",\r\n      message: \"fileList必须是非空的数组\"\r\n    };\r\n  }\r\n\r\n  for (let file of fileList) {\r\n    if (!file || typeof file != \"string\") {\r\n      return {\r\n        code: \"INVALID_PARAM\",\r\n        message: \"fileList的元素必须是非空的字符串\"\r\n      };\r\n    }\r\n  }\r\n\r\n  let params = {\r\n    action: \"storage.batchDeleteFile\",\r\n    fileid_list: fileList\r\n  };\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  }).then(res => {\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      return {\r\n        fileList: res.data.delete_list,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 获取文件下载链接\r\n * @param {Array.<Object>} fileList\r\n */\r\nasync function getTempFileURL({ fileList }) {\r\n  if (!fileList || !Array.isArray(fileList)) {\r\n    return {\r\n      code: \"INVALID_PARAM\",\r\n      message: \"fileList必须是非空的数组\"\r\n    };\r\n  }\r\n\r\n  let file_list = [];\r\n  for (let file of fileList) {\r\n    if (typeof file === 'object') {\r\n      if (\r\n        !file.hasOwnProperty(\"fileID\") ||\r\n        !file.hasOwnProperty(\"maxAge\")\r\n      ) {\r\n        return {\r\n          code: \"INVALID_PARAM\",\r\n          message: \"fileList的元素必须是包含fileID和maxAge的对象\"\r\n        };\r\n      }\r\n\r\n      file_list.push({\r\n        fileid: file.fileID,\r\n        max_age: file.maxAge\r\n      });\r\n    } else if (typeof file === 'string') {\r\n      file_list.push({\r\n        fileid: file,\r\n      });\r\n    } else {\r\n      return {\r\n        code: \"INVALID_PARAM\",\r\n        message: \"fileList的元素必须是字符串\"\r\n      };\r\n    }\r\n  }\r\n\r\n  let params = {\r\n    action: \"storage.batchGetDownloadUrl\",\r\n    file_list\r\n  };\r\n  // console.log(params);\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  }).then(res => {\r\n    // console.log(res);\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      return {\r\n        fileList: res.data.download_list,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nasync function downloadFile({ fileID, tempFilePath }) {\r\n  let tmpUrl,\r\n    self = this;\r\n  try {\r\n    const tmpUrlRes = await this.getTempFileURL({\r\n      fileList: [\r\n        {\r\n          fileID,\r\n          maxAge: 600\r\n        }\r\n      ]\r\n    });\r\n    // console.log(tmpUrlRes);\r\n    const res = tmpUrlRes.fileList[0]\r\n\r\n    if (\r\n      res.code != 'SUCCESS'\r\n    ) {\r\n      return res;\r\n    }\r\n\r\n    tmpUrl = res.tempFileURL;\r\n    tmpUrl = encodeURI(tmpUrl);\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n\r\n  let req = request({\r\n    url: tmpUrl,\r\n    encoding: null,\r\n    proxy: self.config.proxy\r\n  });\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let fileContent = Buffer.alloc(0)\r\n    req.on('response', function (response) {\r\n      if (response && +response.statusCode === 200) {\r\n        if (tempFilePath) {\r\n          response.pipe(fs.createWriteStream(tempFilePath));\r\n        } else {\r\n          response.on('data', (data) => {\r\n            fileContent = Buffer.concat([fileContent, data])\r\n          })\r\n        }\r\n        response.on('end', () => {\r\n          resolve({\r\n            fileContent: tempFilePath ? undefined : fileContent,\r\n            message: '文件下载完成'\r\n          })\r\n        })\r\n      } else {\r\n        reject(response)\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexports.uploadFile = uploadFile;\r\nexports.deleteFile = deleteFile;\r\nexports.getTempFileURL = getTempFileURL;\r\nexports.downloadFile = downloadFile;\r\n","var request = require(\"request\");\nvar auth = require(\"./auth.js\");\nconst version = require(\"../../package.json\").version;\n\nmodule.exports = function(args) {\n  var config = args.config,\n    params = args.params,\n    method = args.method || \"get\",\n    protocol = config.isHttp === true ? \"http\" : \"https\";\n\n  const eventId =\n    new Date().valueOf() +\n    \"_\" +\n    Math.random()\n      .toString()\n      .substr(2, 5);\n\n  params = Object.assign({}, params, {\n    envName: config.envName,\n    timestamp: new Date().valueOf(),\n    eventId\n  });\n\n  for (let key in params) {\n    if (params[key] === undefined) {\n      delete params[key];\n    }\n  }\n  // file 和 wx.openApi带的requestData 需避开签名\n  let file = null;\n  if (params.action === \"storage.uploadFile\") {\n    file = params[\"file\"];\n    delete params[\"file\"];\n  }\n\n  let requestData = null;\n  if (params.action === \"wx.openApi\") {\n    requestData = params[\"requestData\"];\n    delete params[\"requestData\"];\n  }\n\n  if (!config.secretId || !config.secretKey) {\n    if (process.env.TENCENTCLOUD_RUNENV === \"SCF\") {\n      throw Error(\"missing authoration key, redeploy the function\");\n    }\n    throw Error(\"missing secretId or secretKey of tencent cloud\");\n  }\n\n  const authObj = {\n    SecretId: config.secretId,\n    SecretKey: config.secretKey,\n    Method: method,\n    pathname: \"/admin\",\n    Query: params,\n    Headers: Object.assign(\n      {\n        \"user-agent\": `tcb-admin-sdk/${version}`\n      },\n      args.headers || {}\n    )\n  };\n\n  var authorization = auth.getAuth(authObj);\n\n  params.authorization = authorization;\n\n  file && (params.file = file);\n  requestData && (params.requestData = requestData);\n  config.sessionToken && (params.sessionToken = config.sessionToken);\n  params.sdk_version = version;\n\n  let url = protocol + \"://tcb-admin.tencentcloudapi.com/admin\";\n  // url = 'http://localhost:8002/admin'\n\n  if (process.env.TENCENTCLOUD_RUNENV === \"SCF\") {\n    protocol = \"http\";\n    url = protocol + \"://tcb-admin.tencentyun.com/admin\";\n  }\n\n  if (params.action === \"wx.api\" || params.action === \"wx.openApi\") {\n    url = protocol + \"://tcb-open.tencentcloudapi.com/admin\";\n    // url = \"http://localhost:8002/admin\";\n  }\n\n  var opts = {\n    url: config.serviceUrl || url,\n    method: args.method || \"get\",\n    // 先取模块的timeout，没有则取sdk的timeout，还没有就使用默认值\n    timeout: args.timeout || config.timeout || 15000,\n    headers: authObj.Headers,\n    proxy: config.proxy\n  };\n\n  opts.url = `${opts.url}?eventId=${eventId}`;\n\n  if (params.action === \"storage.uploadFile\") {\n    opts.formData = params;\n    opts.formData.file = {\n      value: params.file,\n      options: {\n        filename: params.path\n      }\n    };\n  } else if (args.method == \"post\") {\n    if (params.action === \"wx.openApi\") {\n      opts.formData = params;\n      opts.encoding = null;\n    } else {\n      opts.body = params;\n      opts.json = true;\n    }\n  } else {\n    opts.qs = params;\n  }\n\n  if (args.proxy) {\n    opts.proxy = args.proxy;\n  }\n  // opts.proxy = \"http://web-proxy.tencent.com:8080\";\n  // console.log(JSON.stringify(opts));\n  return new Promise(function(resolve, reject) {\n    request(opts, function(err, response, body) {\n      args && args.callback && args.callback(response);\n\n      if (err === null && response.statusCode == 200) {\n        let res;\n        try {\n          res = typeof body === \"string\" ? JSON.parse(body) : body;\n          // wx.openApi 调用时，需用content-type区分buffer or JSON\n          if (params.action === \"wx.openApi\") {\n            const { headers } = response;\n            if (headers[\"content-type\"] === \"application/json; charset=utf-8\") {\n              res = JSON.parse(res.toString()); // JSON错误时buffer转JSON\n            }\n          }\n        } catch (e) {\n          res = body;\n        }\n        return resolve(res);\n      } else {\n        return reject(err);\n      }\n    });\n  });\n};\n","var crypto = require(\"crypto\");\r\n\r\nfunction camSafeUrlEncode(str) {\r\n  return encodeURIComponent(str)\r\n    .replace(/!/g, \"%21\")\r\n    .replace(/'/g, \"%27\")\r\n    .replace(/\\(/g, \"%28\")\r\n    .replace(/\\)/g, \"%29\")\r\n    .replace(/\\*/g, \"%2A\");\r\n}\r\nfunction map(obj, fn) {\r\n  var o = isArray(obj) ? [] : {};\r\n  for (var i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      o[i] = fn(obj[i], i);\r\n    }\r\n  }\r\n  return o;\r\n}\r\nfunction isArray(arr) {\r\n  return arr instanceof Array;\r\n}\r\n\r\nfunction clone(obj) {\r\n  return map(obj, function(v) {\r\n    return typeof v === \"object\" && v !== undefined && v !== null\r\n      ? clone(v)\r\n      : v;\r\n  });\r\n}\r\n//测试用的key后面可以去掉\r\nvar getAuth = function(opt) {\r\n  //   console.log(opt);\r\n  opt = opt || {};\r\n\r\n  var SecretId = opt.SecretId;\r\n  var SecretKey = opt.SecretKey;\r\n  var method = (opt.method || opt.Method || \"get\").toLowerCase();\r\n  var pathname = opt.pathname || \"/\";\r\n  var queryParams = clone(opt.Query || opt.params || {});\r\n  var headers = clone(opt.Headers || opt.headers || {});\r\n  pathname.indexOf(\"/\") !== 0 && (pathname = \"/\" + pathname);\r\n\r\n  if (!SecretId) return console.error(\"missing param SecretId\");\r\n  if (!SecretKey) return console.error(\"missing param SecretKey\");\r\n\r\n  var getObjectKeys = function(obj) {\r\n    var list = [];\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        if (obj[key] === undefined) {\r\n          continue;\r\n        }\r\n        list.push(key);\r\n      }\r\n    }\r\n    return list.sort();\r\n  };\r\n\r\n  var obj2str = function(obj) {\r\n    var i, key, val;\r\n    var list = [];\r\n    var keyList = getObjectKeys(obj);\r\n    for (i = 0; i < keyList.length; i++) {\r\n      key = keyList[i];\r\n      if (obj[key] === undefined) {\r\n        continue;\r\n      }\r\n      val = obj[key] === null ? \"\" : obj[key];\r\n      if (typeof val !== \"string\") {\r\n        val = JSON.stringify(val);\r\n      }\r\n      key = key.toLowerCase();\r\n      key = camSafeUrlEncode(key);\r\n      val = camSafeUrlEncode(val) || \"\";\r\n      list.push(key + \"=\" + val);\r\n    }\r\n    return list.join(\"&\");\r\n  };\r\n\r\n  // 签名有效起止时间\r\n  var now = parseInt(new Date().getTime() / 1000) - 1;\r\n  var exp = now;\r\n\r\n  var Expires = opt.Expires || opt.expires;\r\n  if (Expires === undefined) {\r\n    exp += 900; // 签名过期时间为当前 + 900s\r\n  } else {\r\n    exp += Expires * 1 || 0;\r\n  }\r\n\r\n  // 要用到的 Authorization 参数列表\r\n  var qSignAlgorithm = \"sha1\";\r\n  var qAk = SecretId;\r\n  var qSignTime = now + \";\" + exp;\r\n  var qKeyTime = now + \";\" + exp;\r\n  var qHeaderList = getObjectKeys(headers)\r\n    .join(\";\")\r\n    .toLowerCase();\r\n  var qUrlParamList = getObjectKeys(queryParams)\r\n    .join(\";\")\r\n    .toLowerCase();\r\n\r\n  // 签名算法说明文档：https://www.qcloud.com/document/product/436/7778\r\n  // 步骤一：计算 SignKey\r\n  var signKey = crypto\r\n    .createHmac(\"sha1\", SecretKey)\r\n    .update(qKeyTime)\r\n    .digest(\"hex\");\r\n\r\n  // console.log(\"queryParams\", queryParams);\r\n  // console.log(obj2str(queryParams));\r\n\r\n  // 步骤二：构成 FormatString\r\n  var formatString = [\r\n    method,\r\n    pathname,\r\n    obj2str(queryParams),\r\n    obj2str(headers),\r\n    \"\"\r\n  ].join(\"\\n\");\r\n\r\n  // console.log(formatString);\r\n  formatString = Buffer.from(formatString, \"utf8\");\r\n\r\n  // 步骤三：计算 StringToSign\r\n  var sha1Algo = crypto.createHash(\"sha1\");\r\n  sha1Algo.update(formatString);\r\n  var res = sha1Algo.digest(\"hex\");\r\n  var stringToSign = [\"sha1\", qSignTime, res, \"\"].join(\"\\n\");\r\n\r\n  // console.log(stringToSign);\r\n  // 步骤四：计算 Signature\r\n  var qSignature = crypto\r\n    .createHmac(\"sha1\", signKey)\r\n    .update(stringToSign)\r\n    .digest(\"hex\");\r\n\r\n  // 步骤五：构造 Authorization\r\n  var authorization = [\r\n    \"q-sign-algorithm=\" + qSignAlgorithm,\r\n    \"q-ak=\" + qAk,\r\n    \"q-sign-time=\" + qSignTime,\r\n    \"q-key-time=\" + qKeyTime,\r\n    \"q-header-list=\" + qHeaderList,\r\n    \"q-url-param-list=\" + qUrlParamList,\r\n    \"q-signature=\" + qSignature\r\n  ].join(\"&\");\r\n\r\n  return authorization;\r\n};\r\n\r\nexports.getAuth = getAuth;\r\n","module.exports = {\n  \"_from\": \"tcb-admin-node@1.4.6\",\n  \"_id\": \"tcb-admin-node@1.4.6\",\n  \"_inBundle\": false,\n  \"_integrity\": \"sha512-Gz61A1zDoxFwMr2Vxl0vo6J2+7bisi0mZGwva852arNwr1n4jkInViN/QfoQT5hpvjW7Zj7phEMtFlMUY1Fjmg==\",\n  \"_location\": \"/tcb-admin-node\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"type\": \"version\",\n    \"registry\": true,\n    \"raw\": \"tcb-admin-node@1.4.6\",\n    \"name\": \"tcb-admin-node\",\n    \"escapedName\": \"tcb-admin-node\",\n    \"rawSpec\": \"1.4.6\",\n    \"saveSpec\": null,\n    \"fetchSpec\": \"1.4.6\"\n  },\n  \"_requiredBy\": [\n    \"/wx-server-sdk\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/tcb-admin-node/-/tcb-admin-node-1.4.6.tgz\",\n  \"_shasum\": \"5076705d5fcbed02fbb720469ff518c50d8f930e\",\n  \"_spec\": \"tcb-admin-node@1.4.6\",\n  \"_where\": \"D:\\\\Devlop\\\\SY_LHDataAnalysis\\\\miniprogram\\\\pages\\\\frmDeleteInputData\\\\node_modules\\\\wx-server-sdk\",\n  \"author\": {\n    \"name\": \"jimmyzhang\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/TencentCloudBase/tcb-admin-node/issues\"\n  },\n  \"bundleDependencies\": false,\n  \"dependencies\": {\n    \"is-regex\": \"^1.0.4\",\n    \"lodash.merge\": \"^4.6.1\",\n    \"request\": \"^2.87.0\"\n  },\n  \"deprecated\": false,\n  \"description\": \"tencent cloud base admin sdk for node.js\",\n  \"devDependencies\": {\n    \"@types/jest\": \"^23.1.4\",\n    \"@types/mocha\": \"^5.2.4\",\n    \"@types/node\": \"^10.12.12\",\n    \"dumper.js\": \"^1.3.0\",\n    \"espower-typescript\": \"^8.1.4\",\n    \"jest\": \"^23.3.0\",\n    \"mocha\": \"^5.2.0\",\n    \"power-assert\": \"^1.5.0\",\n    \"ts-jest\": \"^23.10.4\",\n    \"tslib\": \"^1.7.1\",\n    \"typescript\": \"^2.3.4\"\n  },\n  \"engines\": {\n    \"node\": \">=8.6.0\"\n  },\n  \"homepage\": \"https://github.com/TencentCloudBase/tcb-admin-node#readme\",\n  \"keywords\": [\n    \"tcb-admin\"\n  ],\n  \"license\": \"MIT\",\n  \"main\": \"index.js\",\n  \"name\": \"tcb-admin-node\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/TencentCloudBase/tcb-admin-node.git\"\n  },\n  \"scripts\": {\n    \"coverage\": \"jest --verbose false --coverage\",\n    \"test\": \"jest --verbose false -i\",\n    \"tsc\": \"tsc -p tsconfig.json\",\n    \"tsc:w\": \"tsc -p tsconfig.json -w\",\n    \"tstest\": \"mocha --require espower-typescript/guess test/**/*.test.ts\"\n  },\n  \"version\": \"1.4.6\"\n}\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./db\"));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst Geo = require(\"./geo\");\r\nconst collection_1 = require(\"./collection\");\r\nconst command_1 = require(\"./command\");\r\nconst serverDate_1 = require(\"./serverDate\");\r\nconst request_1 = require(\"./request\");\r\nconst regexp_1 = require(\"./regexp\");\r\nclass Db {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this.Geo = Geo;\r\n        this.serverDate = serverDate_1.ServerDateConstructor;\r\n        this.command = command_1.Command;\r\n        this.RegExp = regexp_1.RegExpConstructor;\r\n    }\r\n    collection(collName) {\r\n        if (!collName) {\r\n            throw new Error(\"Collection name is required\");\r\n        }\r\n        return new collection_1.CollectionReference(this, collName);\r\n    }\r\n    createCollection(collName) {\r\n        let request = new request_1.Request(this);\r\n        const params = {\r\n            collectionName: collName\r\n        };\r\n        return request.send(\"addCollection\", params);\r\n    }\r\n}\r\nexports.Db = Db;\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./point\"));\r\n__export(require(\"./lineString\"));\r\n__export(require(\"./polygon\"));\r\n__export(require(\"./multiPoint\"));\r\n__export(require(\"./multiLineString\"));\r\n__export(require(\"./multiPolygon\"));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst validate_1 = require(\"../validate\");\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst type_1 = require(\"../utils/type\");\r\nclass Point {\r\n    constructor(longitude, latitude) {\r\n        validate_1.Validate.isGeopoint(\"longitude\", longitude);\r\n        validate_1.Validate.isGeopoint(\"latitude\", latitude);\r\n        this.longitude = longitude;\r\n        this.latitude = latitude;\r\n    }\r\n    parse(key) {\r\n        return {\r\n            [key]: {\r\n                type: 'Point',\r\n                coordinates: [this.longitude, this.latitude]\r\n            }\r\n        };\r\n    }\r\n    toJSON() {\r\n        return {\r\n            type: 'Point',\r\n            coordinates: [\r\n                this.longitude,\r\n                this.latitude,\r\n            ],\r\n        };\r\n    }\r\n    toReadableString() {\r\n        return `[${this.longitude},${this.latitude}]`;\r\n    }\r\n    static validate(point) {\r\n        return point.type === 'Point' &&\r\n            type_1.isArray(point.coordinates) &&\r\n            validate_1.Validate.isGeopoint('longitude', point.coordinates[0]) &&\r\n            validate_1.Validate.isGeopoint('latitude', point.coordinates[1]);\r\n    }\r\n    get _internalType() {\r\n        return symbol_1.SYMBOL_GEO_POINT;\r\n    }\r\n}\r\nexports.Point = Point;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constant_1 = require(\"./constant\");\r\nconst util_1 = require(\"./util\");\r\nclass Validate {\r\n    static isGeopoint(point, degree) {\r\n        if (util_1.Util.whichType(degree) !== constant_1.FieldType.Number) {\r\n            throw new Error(\"Geo Point must be number type\");\r\n        }\r\n        const degreeAbs = Math.abs(degree);\r\n        if (point === \"latitude\" && degreeAbs > 90) {\r\n            throw new Error(\"latitude should be a number ranges from -90 to 90\");\r\n        }\r\n        else if (point === \"longitude\" && degreeAbs > 180) {\r\n            throw new Error(\"longitude should be a number ranges from -180 to 180\");\r\n        }\r\n        return true;\r\n    }\r\n    static isInteger(param, num) {\r\n        if (!Number.isInteger(num)) {\r\n            throw new Error(param + constant_1.ErrorCode.IntergerError);\r\n        }\r\n        return true;\r\n    }\r\n    static isFieldOrder(direction) {\r\n        if (constant_1.OrderDirectionList.indexOf(direction) === -1) {\r\n            throw new Error(constant_1.ErrorCode.DirectionError);\r\n        }\r\n        return true;\r\n    }\r\n    static isFieldPath(path) {\r\n        if (!/^[a-zA-Z0-9-_\\.]/.test(path)) {\r\n            throw new Error();\r\n        }\r\n        return true;\r\n    }\r\n    static isOperator(op) {\r\n        if (constant_1.WhereFilterOpList.indexOf(op) === -1) {\r\n            throw new Error(constant_1.ErrorCode.OpStrError);\r\n        }\r\n        return true;\r\n    }\r\n    static isCollName(name) {\r\n        if (!/^[a-zA-Z0-9]([a-zA-Z0-9-_]){1,32}$/.test(name)) {\r\n            throw new Error(constant_1.ErrorCode.CollNameError);\r\n        }\r\n        return true;\r\n    }\r\n    static isDocID(docId) {\r\n        if (!/^([a-fA-F0-9]){24}$/.test(docId)) {\r\n            throw new Error(constant_1.ErrorCode.DocIDError);\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.Validate = Validate;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ErrorCode;\r\n(function (ErrorCode) {\r\n    ErrorCode[\"DocIDError\"] = \"\\u6587\\u6863ID\\u4E0D\\u5408\\u6CD5\";\r\n    ErrorCode[\"CollNameError\"] = \"\\u96C6\\u5408\\u540D\\u79F0\\u4E0D\\u5408\\u6CD5\";\r\n    ErrorCode[\"OpStrError\"] = \"\\u64CD\\u4F5C\\u7B26\\u4E0D\\u5408\\u6CD5\";\r\n    ErrorCode[\"DirectionError\"] = \"\\u6392\\u5E8F\\u5B57\\u7B26\\u4E0D\\u5408\\u6CD5\";\r\n    ErrorCode[\"IntergerError\"] = \"must be integer\";\r\n})(ErrorCode || (ErrorCode = {}));\r\nexports.ErrorCode = ErrorCode;\r\nconst FieldType = {\r\n    String: \"String\",\r\n    Number: \"Number\",\r\n    Object: \"Object\",\r\n    Array: \"Array\",\r\n    Boolean: \"Boolean\",\r\n    Null: \"Null\",\r\n    GeoPoint: \"GeoPoint\",\r\n    GeoLineString: \"GeoLineString\",\r\n    GeoPolygon: \"GeoPolygon\",\r\n    GeoMultiPoint: \"GeoMultiPoint\",\r\n    GeoMultiLineString: \"GeoMultiLineString\",\r\n    GeoMultiPolygon: \"GeoMultiPolygon\",\r\n    Timestamp: \"Date\",\r\n    Command: \"Command\",\r\n    ServerDate: \"ServerDate\"\r\n};\r\nexports.FieldType = FieldType;\r\nconst OrderDirectionList = [\"desc\", \"asc\"];\r\nexports.OrderDirectionList = OrderDirectionList;\r\nconst WhereFilterOpList = [\"<\", \"<=\", \"==\", \">=\", \">\"];\r\nexports.WhereFilterOpList = WhereFilterOpList;\r\nvar Opeartor;\r\n(function (Opeartor) {\r\n    Opeartor[\"lt\"] = \"<\";\r\n    Opeartor[\"gt\"] = \">\";\r\n    Opeartor[\"lte\"] = \"<=\";\r\n    Opeartor[\"gte\"] = \">=\";\r\n    Opeartor[\"eq\"] = \"==\";\r\n})(Opeartor || (Opeartor = {}));\r\nexports.Opeartor = Opeartor;\r\nconst OperatorMap = {\r\n    [Opeartor.eq]: \"$eq\",\r\n    [Opeartor.lt]: \"$lt\",\r\n    [Opeartor.lte]: \"$lte\",\r\n    [Opeartor.gt]: \"$gt\",\r\n    [Opeartor.gte]: \"$gte\"\r\n};\r\nexports.OperatorMap = OperatorMap;\r\nconst UpdateOperatorList = [\r\n    \"$set\",\r\n    \"$inc\",\r\n    \"$mul\",\r\n    \"$unset\",\r\n    \"$push\",\r\n    \"$pop\",\r\n    \"$unshift\",\r\n    \"$shift\",\r\n    \"$currentDate\",\r\n    \"$each\",\r\n    \"$position\"\r\n];\r\nexports.UpdateOperatorList = UpdateOperatorList;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst constant_1 = require(\"./constant\");\r\nconst geo_1 = require(\"./geo\");\r\nconst serverDate_1 = require(\"./serverDate\");\r\nclass Util {\r\n}\r\nUtil.formatResDocumentData = (documents) => {\r\n    return documents.map(document => {\r\n        return Util.formatField(document);\r\n    });\r\n};\r\nUtil.formatField = document => {\r\n    const keys = Object.keys(document);\r\n    let protoField = {};\r\n    if (Array.isArray(document)) {\r\n        protoField = [];\r\n    }\r\n    keys.forEach(key => {\r\n        const item = document[key];\r\n        const type = Util.whichType(item);\r\n        let realValue;\r\n        switch (type) {\r\n            case constant_1.FieldType.GeoPoint:\r\n                realValue = new geo_1.Point(item.coordinates[0], item.coordinates[1]);\r\n                break;\r\n            case constant_1.FieldType.GeoLineString:\r\n                realValue = new geo_1.LineString(item.coordinates.map(point => new geo_1.Point(point[0], point[1])));\r\n                break;\r\n            case constant_1.FieldType.GeoPolygon:\r\n                realValue = new geo_1.Polygon(item.coordinates.map(line => new geo_1.LineString(line.map(([lng, lat]) => new geo_1.Point(lng, lat)))));\r\n                break;\r\n            case constant_1.FieldType.GeoMultiPoint:\r\n                realValue = new geo_1.MultiPoint(item.coordinates.map(point => new geo_1.Point(point[0], point[1])));\r\n                break;\r\n            case constant_1.FieldType.GeoMultiLineString:\r\n                realValue = new geo_1.MultiLineString(item.coordinates.map(line => new geo_1.LineString(line.map(([lng, lat]) => new geo_1.Point(lng, lat)))));\r\n                break;\r\n            case constant_1.FieldType.GeoMultiPolygon:\r\n                realValue = new geo_1.MultiPolygon(item.coordinates.map(polygon => new geo_1.Polygon(polygon.map(line => new geo_1.LineString(line.map(([lng, lat]) => new geo_1.Point(lng, lat)))))));\r\n                break;\r\n            case constant_1.FieldType.Timestamp:\r\n                realValue = new Date(item.$timestamp * 1000);\r\n                break;\r\n            case constant_1.FieldType.Object:\r\n            case constant_1.FieldType.Array:\r\n                realValue = Util.formatField(item);\r\n                break;\r\n            case constant_1.FieldType.ServerDate:\r\n                realValue = new Date(item.$date);\r\n                break;\r\n            default:\r\n                realValue = item;\r\n        }\r\n        if (Array.isArray(protoField)) {\r\n            protoField.push(realValue);\r\n        }\r\n        else {\r\n            protoField[key] = realValue;\r\n        }\r\n    });\r\n    return protoField;\r\n};\r\nUtil.whichType = (obj) => {\r\n    let type = Object.prototype.toString.call(obj).slice(8, -1);\r\n    if (type === constant_1.FieldType.Object) {\r\n        if (obj instanceof geo_1.Point) {\r\n            return constant_1.FieldType.GeoPoint;\r\n        }\r\n        else if (obj instanceof Date) {\r\n            return constant_1.FieldType.Timestamp;\r\n        }\r\n        else if (obj instanceof serverDate_1.ServerDate) {\r\n            return constant_1.FieldType.ServerDate;\r\n        }\r\n        if (obj.$timestamp) {\r\n            type = constant_1.FieldType.Timestamp;\r\n        }\r\n        else if (obj.$date) {\r\n            type = constant_1.FieldType.ServerDate;\r\n        }\r\n        else if (geo_1.Point.validate(obj)) {\r\n            type = constant_1.FieldType.GeoPoint;\r\n        }\r\n        else if (geo_1.LineString.validate(obj)) {\r\n            type = constant_1.FieldType.GeoLineString;\r\n        }\r\n        else if (geo_1.Polygon.validate(obj)) {\r\n            type = constant_1.FieldType.GeoPolygon;\r\n        }\r\n        else if (geo_1.MultiPoint.validate(obj)) {\r\n            type = constant_1.FieldType.GeoMultiPoint;\r\n        }\r\n        else if (geo_1.MultiLineString.validate(obj)) {\r\n            type = constant_1.FieldType.GeoMultiLineString;\r\n        }\r\n        else if (geo_1.MultiPolygon.validate(obj)) {\r\n            type = constant_1.FieldType.GeoMultiPolygon;\r\n        }\r\n    }\r\n    return type;\r\n};\r\nUtil.generateDocId = () => {\r\n    let chars = \"ABCDEFabcdef0123456789\";\r\n    let autoId = \"\";\r\n    for (let i = 0; i < 24; i++) {\r\n        autoId += chars.charAt(Math.floor(Math.random() * chars.length));\r\n    }\r\n    return autoId;\r\n};\r\nexports.Util = Util;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nclass ServerDate {\r\n    constructor({ offset = 0 } = {}) {\r\n        this.offset = offset;\r\n    }\r\n    get _internalType() {\r\n        return symbol_1.SYMBOL_SERVER_DATE;\r\n    }\r\n    parse() {\r\n        return {\r\n            $date: {\r\n                offset: this.offset\r\n            }\r\n        };\r\n    }\r\n}\r\nexports.ServerDate = ServerDate;\r\nfunction ServerDateConstructor(opt) {\r\n    return new ServerDate(opt);\r\n}\r\nexports.ServerDateConstructor = ServerDateConstructor;\r\n","\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../utils/symbol\");\r\n__export(require(\"../utils/symbol\"));\r\nexports.SYMBOL_UNSET_FIELD_NAME = symbol_1.default.for('UNSET_FIELD_NAME');\r\nexports.SYMBOL_UPDATE_COMMAND = symbol_1.default.for('UPDATE_COMMAND');\r\nexports.SYMBOL_QUERY_COMMAND = symbol_1.default.for('QUERY_COMMAND');\r\nexports.SYMBOL_LOGIC_COMMAND = symbol_1.default.for('LOGIC_COMMAND');\r\nexports.SYMBOL_GEO_POINT = symbol_1.default.for('GEO_POINT');\r\nexports.SYMBOL_GEO_LINE_STRING = symbol_1.default.for('SYMBOL_GEO_LINE_STRING');\r\nexports.SYMBOL_GEO_POLYGON = symbol_1.default.for('SYMBOL_GEO_POLYGON');\r\nexports.SYMBOL_GEO_MULTI_POINT = symbol_1.default.for('SYMBOL_GEO_MULTI_POINT');\r\nexports.SYMBOL_GEO_MULTI_LINE_STRING = symbol_1.default.for('SYMBOL_GEO_MULTI_LINE_STRING');\r\nexports.SYMBOL_GEO_MULTI_POLYGON = symbol_1.default.for('SYMBOL_GEO_MULTI_POLYGON');\r\nexports.SYMBOL_SERVER_DATE = symbol_1.default.for('SERVER_DATE');\r\nexports.SYMBOL_REGEXP = symbol_1.default.for('REGEXP');\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _symbols = [];\r\nconst __internalMark__ = {};\r\nclass HiddenSymbol {\r\n    constructor(target) {\r\n        Object.defineProperties(this, {\r\n            target: {\r\n                enumerable: false,\r\n                writable: false,\r\n                configurable: false,\r\n                value: target,\r\n            },\r\n        });\r\n    }\r\n}\r\nclass InternalSymbol extends HiddenSymbol {\r\n    constructor(target, __mark__) {\r\n        if (__mark__ !== __internalMark__) {\r\n            throw new TypeError('InternalSymbol cannot be constructed with new operator');\r\n        }\r\n        super(target);\r\n    }\r\n    static for(target) {\r\n        for (let i = 0, len = _symbols.length; i < len; i++) {\r\n            if (_symbols[i].target === target) {\r\n                return _symbols[i].instance;\r\n            }\r\n        }\r\n        const symbol = new InternalSymbol(target, __internalMark__);\r\n        _symbols.push({\r\n            target,\r\n            instance: symbol,\r\n        });\r\n        return symbol;\r\n    }\r\n}\r\nexports.InternalSymbol = InternalSymbol;\r\nexports.default = InternalSymbol;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"./symbol\");\r\nexports.getType = (x) => Object.prototype.toString.call(x).slice(8, -1).toLowerCase();\r\nexports.isObject = (x) => exports.getType(x) === 'object';\r\nexports.isString = (x) => exports.getType(x) === 'string';\r\nexports.isNumber = (x) => exports.getType(x) === 'number';\r\nexports.isPromise = (x) => exports.getType(x) === 'promise';\r\nexports.isFunction = (x) => typeof x === 'function';\r\nexports.isArray = (x) => Array.isArray(x);\r\nexports.isDate = (x) => exports.getType(x) === 'date';\r\nexports.isRegExp = (x) => exports.getType(x) === 'regexp';\r\nexports.isInternalObject = (x) => x && (x._internalType instanceof symbol_1.InternalSymbol);\r\nexports.isPlainObject = (obj) => {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return false;\r\n    let proto = obj;\r\n    while (Object.getPrototypeOf(proto) !== null) {\r\n        proto = Object.getPrototypeOf(proto);\r\n    }\r\n    return Object.getPrototypeOf(obj) === proto;\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst point_1 = require(\"./point\");\r\nconst type_1 = require(\"../utils/type\");\r\nclass LineString {\r\n    constructor(points) {\r\n        if (!type_1.isArray(points)) {\r\n            throw new TypeError(`\"points\" must be of type Point[]. Received type ${typeof points}`);\r\n        }\r\n        if (points.length < 2) {\r\n            throw new Error(`\"points\" must contain 2 points at least`);\r\n        }\r\n        points.forEach(point => {\r\n            if (!(point instanceof point_1.Point)) {\r\n                throw new TypeError(`\"points\" must be of type Point[]. Received type ${typeof point}[]`);\r\n            }\r\n        });\r\n        this.points = points;\r\n    }\r\n    parse(key) {\r\n        return {\r\n            [key]: {\r\n                type: 'LineString',\r\n                coordinates: this.points.map(point => point.toJSON().coordinates)\r\n            }\r\n        };\r\n    }\r\n    toJSON() {\r\n        return {\r\n            type: 'LineString',\r\n            coordinates: this.points.map(point => point.toJSON().coordinates)\r\n        };\r\n    }\r\n    static validate(lineString) {\r\n        if (lineString.type !== 'LineString' || !type_1.isArray(lineString.coordinates)) {\r\n            return false;\r\n        }\r\n        for (let point of lineString.coordinates) {\r\n            if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static isClosed(lineString) {\r\n        const firstPoint = lineString.points[0];\r\n        const lastPoint = lineString.points[lineString.points.length - 1];\r\n        if (firstPoint.latitude === lastPoint.latitude && firstPoint.longitude === lastPoint.longitude) {\r\n            return true;\r\n        }\r\n    }\r\n    get _internalType() {\r\n        return symbol_1.SYMBOL_GEO_LINE_STRING;\r\n    }\r\n}\r\nexports.LineString = LineString;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst type_1 = require(\"../utils/type\");\r\nconst lineString_1 = require(\"./lineString\");\r\nclass Polygon {\r\n    constructor(lines) {\r\n        if (!type_1.isArray(lines)) {\r\n            throw new TypeError(`\"lines\" must be of type LineString[]. Received type ${typeof lines}`);\r\n        }\r\n        if (lines.length === 0) {\r\n            throw new Error(\"Polygon must contain 1 linestring at least\");\r\n        }\r\n        lines.forEach(line => {\r\n            if (!(line instanceof lineString_1.LineString)) {\r\n                throw new TypeError(`\"lines\" must be of type LineString[]. Received type ${typeof line}[]`);\r\n            }\r\n            if (!lineString_1.LineString.isClosed(line)) {\r\n                throw new Error(`LineString ${line.points.map(p => p.toReadableString())} is not a closed cycle`);\r\n            }\r\n        });\r\n        this.lines = lines;\r\n    }\r\n    parse(key) {\r\n        return {\r\n            [key]: {\r\n                type: 'Polygon',\r\n                coordinates: this.lines.map(line => {\r\n                    return line.points.map(point => [point.longitude, point.latitude]);\r\n                })\r\n            }\r\n        };\r\n    }\r\n    toJSON() {\r\n        return {\r\n            type: 'Polygon',\r\n            coordinates: this.lines.map(line => {\r\n                return line.points.map(point => [point.longitude, point.latitude]);\r\n            })\r\n        };\r\n    }\r\n    static validate(polygon) {\r\n        if (polygon.type !== 'Polygon' || !type_1.isArray(polygon.coordinates)) {\r\n            return false;\r\n        }\r\n        for (let line of polygon.coordinates) {\r\n            if (!this.isCloseLineString(line)) {\r\n                return false;\r\n            }\r\n            for (let point of line) {\r\n                if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static isCloseLineString(lineString) {\r\n        const firstPoint = lineString[0];\r\n        const lastPoint = lineString[lineString.length - 1];\r\n        if (firstPoint[0] !== lastPoint[0] || firstPoint[1] !== lastPoint[1]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    get _internalType() {\r\n        return symbol_1.SYMBOL_GEO_MULTI_POLYGON;\r\n    }\r\n}\r\nexports.Polygon = Polygon;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst point_1 = require(\"./point\");\r\nconst type_1 = require(\"../utils/type\");\r\nclass MultiPoint {\r\n    constructor(points) {\r\n        if (!type_1.isArray(points)) {\r\n            throw new TypeError(`\"points\" must be of type Point[]. Received type ${typeof points}`);\r\n        }\r\n        if (points.length === 0) {\r\n            throw new Error(`\"points\" must contain 1 point at least`);\r\n        }\r\n        points.forEach(point => {\r\n            if (!(point instanceof point_1.Point)) {\r\n                throw new TypeError(`\"points\" must be of type Point[]. Received type ${typeof point}[]`);\r\n            }\r\n        });\r\n        this.points = points;\r\n    }\r\n    parse(key) {\r\n        return {\r\n            [key]: {\r\n                type: 'MultiPoint',\r\n                coordinates: this.points.map(point => point.toJSON().coordinates)\r\n            }\r\n        };\r\n    }\r\n    toJSON() {\r\n        return {\r\n            type: 'MultiPoint',\r\n            coordinates: this.points.map(point => point.toJSON().coordinates)\r\n        };\r\n    }\r\n    static validate(multiPoint) {\r\n        if (multiPoint.type !== 'MultiPoint' || !type_1.isArray(multiPoint.coordinates)) {\r\n            return false;\r\n        }\r\n        for (let point of multiPoint.coordinates) {\r\n            if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    get _internalType() {\r\n        return symbol_1.SYMBOL_GEO_MULTI_POINT;\r\n    }\r\n}\r\nexports.MultiPoint = MultiPoint;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst type_1 = require(\"../utils/type\");\r\nconst lineString_1 = require(\"./lineString\");\r\nclass MultiLineString {\r\n    constructor(lines) {\r\n        if (!type_1.isArray(lines)) {\r\n            throw new TypeError(`\"lines\" must be of type LineString[]. Received type ${typeof lines}`);\r\n        }\r\n        if (lines.length === 0) {\r\n            throw new Error(\"Polygon must contain 1 linestring at least\");\r\n        }\r\n        lines.forEach(line => {\r\n            if (!(line instanceof lineString_1.LineString)) {\r\n                throw new TypeError(`\"lines\" must be of type LineString[]. Received type ${typeof line}[]`);\r\n            }\r\n        });\r\n        this.lines = lines;\r\n    }\r\n    parse(key) {\r\n        return {\r\n            [key]: {\r\n                type: 'MultiLineString',\r\n                coordinates: this.lines.map(line => {\r\n                    return line.points.map(point => [point.longitude, point.latitude]);\r\n                })\r\n            }\r\n        };\r\n    }\r\n    toJSON() {\r\n        return {\r\n            type: 'MultiLineString',\r\n            coordinates: this.lines.map(line => {\r\n                return line.points.map(point => [point.longitude, point.latitude]);\r\n            })\r\n        };\r\n    }\r\n    static validate(multiLineString) {\r\n        if (multiLineString.type !== 'MultiLineString' || !type_1.isArray(multiLineString.coordinates)) {\r\n            return false;\r\n        }\r\n        for (let line of multiLineString.coordinates) {\r\n            for (let point of line) {\r\n                if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    get _internalType() {\r\n        return symbol_1.SYMBOL_GEO_MULTI_LINE_STRING;\r\n    }\r\n}\r\nexports.MultiLineString = MultiLineString;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst type_1 = require(\"../utils/type\");\r\nconst polygon_1 = require(\"./polygon\");\r\nclass MultiPolygon {\r\n    constructor(polygons) {\r\n        if (!type_1.isArray(polygons)) {\r\n            throw new TypeError(`\"polygons\" must be of type Polygon[]. Received type ${typeof polygons}`);\r\n        }\r\n        if (polygons.length === 0) {\r\n            throw new Error(\"MultiPolygon must contain 1 polygon at least\");\r\n        }\r\n        for (let polygon of polygons) {\r\n            if (!(polygon instanceof polygon_1.Polygon)) {\r\n                throw new TypeError(`\"polygon\" must be of type Polygon[]. Received type ${typeof polygon}[]`);\r\n            }\r\n        }\r\n        this.polygons = polygons;\r\n    }\r\n    parse(key) {\r\n        return {\r\n            [key]: {\r\n                type: 'MultiPolygon',\r\n                coordinates: this.polygons.map(polygon => {\r\n                    return polygon.lines.map(line => {\r\n                        return line.points.map(point => [point.longitude, point.latitude]);\r\n                    });\r\n                })\r\n            }\r\n        };\r\n    }\r\n    toJSON() {\r\n        return {\r\n            type: 'MultiPolygon',\r\n            coordinates: this.polygons.map(polygon => {\r\n                return polygon.lines.map(line => {\r\n                    return line.points.map(point => [point.longitude, point.latitude]);\r\n                });\r\n            })\r\n        };\r\n    }\r\n    static validate(multiPolygon) {\r\n        if (multiPolygon.type !== 'MultiPolygon' || !type_1.isArray(multiPolygon.coordinates)) {\r\n            return false;\r\n        }\r\n        for (let polygon of multiPolygon.coordinates) {\r\n            for (let line of polygon) {\r\n                for (let point of line) {\r\n                    if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    get _internalType() {\r\n        return symbol_1.SYMBOL_GEO_POLYGON;\r\n    }\r\n}\r\nexports.MultiPolygon = MultiPolygon;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst document_1 = require(\"./document\");\r\nconst query_1 = require(\"./query\");\r\nclass CollectionReference extends query_1.Query {\r\n    constructor(db, coll) {\r\n        super(db, coll);\r\n    }\r\n    get name() {\r\n        return this._coll;\r\n    }\r\n    doc(docID) {\r\n        return new document_1.DocumentReference(this._db, this._coll, docID);\r\n    }\r\n    add(data) {\r\n        let docRef = this.doc();\r\n        return docRef.create(data);\r\n    }\r\n}\r\nexports.CollectionReference = CollectionReference;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst request_1 = require(\"./request\");\r\nconst util_1 = require(\"./util\");\r\nconst update_1 = require(\"./serializer/update\");\r\nconst datatype_1 = require(\"./serializer/datatype\");\r\nconst update_2 = require(\"./commands/update\");\r\nclass DocumentReference {\r\n    constructor(db, coll, docID, projection = {}) {\r\n        this._db = db;\r\n        this._coll = coll;\r\n        this.id = docID;\r\n        this.request = new request_1.Request(this._db);\r\n        this.projection = projection;\r\n    }\r\n    create(data) {\r\n        let params = {\r\n            collectionName: this._coll,\r\n            data: datatype_1.serialize(data)\r\n        };\r\n        if (this.id) {\r\n            params[\"_id\"] = this.id;\r\n        }\r\n        return new Promise(resolve => {\r\n            this.request.send(\"addDocument\", params).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                    return;\r\n                }\r\n                else {\r\n                    resolve({\r\n                        id: res.data._id,\r\n                        requestId: res.requestId\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    set(data) {\r\n        if (!data || typeof data !== \"object\") {\r\n            return Promise.resolve({\r\n                code: 'INVALID_PARAM',\r\n                message: '参数必需是非空对象'\r\n            });\r\n        }\r\n        if (data.hasOwnProperty('_id')) {\r\n            return Promise.resolve({\r\n                code: 'INVALID_PARAM',\r\n                message: '不能更新_id的值'\r\n            });\r\n        }\r\n        let hasOperator = false;\r\n        const checkMixed = (objs) => {\r\n            if (typeof objs === 'object') {\r\n                for (let key in objs) {\r\n                    if (objs[key] instanceof update_2.UpdateCommand) {\r\n                        hasOperator = true;\r\n                    }\r\n                    else if (typeof objs[key] === 'object') {\r\n                        checkMixed(objs[key]);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        checkMixed(data);\r\n        if (hasOperator) {\r\n            return Promise.resolve({\r\n                code: 'DATABASE_REQUEST_FAILED',\r\n                message: 'update operator complicit'\r\n            });\r\n        }\r\n        const merge = false;\r\n        let param = {\r\n            collectionName: this._coll,\r\n            data: datatype_1.serialize(data),\r\n            multi: false,\r\n            merge,\r\n            upsert: true\r\n        };\r\n        if (this.id) {\r\n            param[\"query\"] = { _id: this.id };\r\n        }\r\n        return new Promise(resolve => {\r\n            this.request.send(\"updateDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        updated: res.data.updated,\r\n                        upsertedId: res.data.upserted_id,\r\n                        requestId: res.requestId\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    update(data) {\r\n        if (!data || typeof data !== \"object\") {\r\n            return Promise.resolve({\r\n                code: 'INVALID_PARAM',\r\n                message: '参数必需是非空对象'\r\n            });\r\n        }\r\n        if (data.hasOwnProperty('_id')) {\r\n            return Promise.resolve({\r\n                code: 'INVALID_PARAM',\r\n                message: '不能更新_id的值'\r\n            });\r\n        }\r\n        const query = { _id: this.id };\r\n        const merge = true;\r\n        const param = {\r\n            collectionName: this._coll,\r\n            data: update_1.UpdateSerializer.encode(data),\r\n            query: query,\r\n            multi: false,\r\n            merge,\r\n            upsert: false\r\n        };\r\n        return new Promise(resolve => {\r\n            this.request.send(\"updateDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        updated: res.data.updated,\r\n                        upsertedId: res.data.upserted_id,\r\n                        requestId: res.requestId\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    remove() {\r\n        const query = { _id: this.id };\r\n        const param = {\r\n            collectionName: this._coll,\r\n            query: query,\r\n            multi: false\r\n        };\r\n        return new Promise(resolve => {\r\n            this.request.send(\"deleteDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        deleted: res.data.deleted,\r\n                        requestId: res.requestId\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    get() {\r\n        const query = { _id: this.id };\r\n        const param = {\r\n            collectionName: this._coll,\r\n            query: query,\r\n            multi: false,\r\n            projection: this.projection\r\n        };\r\n        return new Promise(resolve => {\r\n            this.request.send(\"queryDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    const documents = util_1.Util.formatResDocumentData(res.data.list);\r\n                    resolve({\r\n                        data: documents,\r\n                        requestId: res.requestId,\r\n                        total: res.TotalCount,\r\n                        limit: res.Limit,\r\n                        offset: res.Offset\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    field(projection) {\r\n        for (let k in projection) {\r\n            if (projection[k]) {\r\n                projection[k] = 1;\r\n            }\r\n            else {\r\n                projection[k] = 0;\r\n            }\r\n        }\r\n        return new DocumentReference(this._db, this._coll, this.id, projection);\r\n    }\r\n}\r\nexports.DocumentReference = DocumentReference;\r\n","\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst requestHandler = require(\"../utils/httpRequest\");\r\nclass Request {\r\n    constructor(db) {\r\n        this.db = db;\r\n    }\r\n    send(api, data) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const params = Object.assign({}, data, {\r\n                action: `database.${api}`\r\n            });\r\n            const slowQueryWarning = setTimeout(() => {\r\n                console.warn('Database operation is longer than 3s. Please check query performance and your network environment.');\r\n            }, 3000);\r\n            try {\r\n                return yield requestHandler({\r\n                    timeout: this.db.config.timeout,\r\n                    config: this.db.config.config,\r\n                    params,\r\n                    method: \"post\",\r\n                    headers: {\r\n                        \"content-type\": \"application/json\"\r\n                    }\r\n                });\r\n            }\r\n            finally {\r\n                clearTimeout(slowQueryWarning);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.Request = Request;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst update_1 = require(\"../commands/update\");\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst type_1 = require(\"../utils/type\");\r\nconst operator_map_1 = require(\"../operator-map\");\r\nconst common_1 = require(\"./common\");\r\nclass UpdateSerializer {\r\n    constructor() {\r\n    }\r\n    static encode(query) {\r\n        const stringifier = new UpdateSerializer();\r\n        return stringifier.encodeUpdate(query);\r\n    }\r\n    encodeUpdate(query) {\r\n        if (update_1.isUpdateCommand(query)) {\r\n            return this.encodeUpdateCommand(query);\r\n        }\r\n        else if (type_1.getType(query) === 'object') {\r\n            return this.encodeUpdateObject(query);\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    }\r\n    encodeUpdateCommand(query) {\r\n        if (query.fieldName === symbol_1.SYMBOL_UNSET_FIELD_NAME) {\r\n            throw new Error(`Cannot encode a comparison command with unset field name`);\r\n        }\r\n        switch (query.operator) {\r\n            case update_1.UPDATE_COMMANDS_LITERAL.SET:\r\n            case update_1.UPDATE_COMMANDS_LITERAL.REMOVE:\r\n            case update_1.UPDATE_COMMANDS_LITERAL.INC:\r\n            case update_1.UPDATE_COMMANDS_LITERAL.MUL: {\r\n                return this.encodeFieldUpdateCommand(query);\r\n            }\r\n            case update_1.UPDATE_COMMANDS_LITERAL.PUSH:\r\n            case update_1.UPDATE_COMMANDS_LITERAL.POP:\r\n            case update_1.UPDATE_COMMANDS_LITERAL.SHIFT:\r\n            case update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT: {\r\n                return this.encodeArrayUpdateCommand(query);\r\n            }\r\n            default: {\r\n                return this.encodeFieldUpdateCommand(query);\r\n            }\r\n        }\r\n    }\r\n    encodeFieldUpdateCommand(query) {\r\n        const $op = operator_map_1.operatorToString(query.operator);\r\n        switch (query.operator) {\r\n            case update_1.UPDATE_COMMANDS_LITERAL.REMOVE: {\r\n                return {\r\n                    [$op]: {\r\n                        [query.fieldName]: '',\r\n                    },\r\n                };\r\n            }\r\n            case update_1.UPDATE_COMMANDS_LITERAL.SET:\r\n            case update_1.UPDATE_COMMANDS_LITERAL.INC:\r\n            case update_1.UPDATE_COMMANDS_LITERAL.MUL:\r\n            default: {\r\n                return {\r\n                    [$op]: {\r\n                        [query.fieldName]: query.operands[0],\r\n                    },\r\n                };\r\n            }\r\n        }\r\n    }\r\n    encodeArrayUpdateCommand(query) {\r\n        const $op = operator_map_1.operatorToString(query.operator);\r\n        switch (query.operator) {\r\n            case update_1.UPDATE_COMMANDS_LITERAL.PUSH: {\r\n                const modifiers = {\r\n                    $each: query.operands.map(common_1.encodeInternalDataType),\r\n                };\r\n                return {\r\n                    [$op]: {\r\n                        [query.fieldName]: modifiers,\r\n                    },\r\n                };\r\n            }\r\n            case update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT: {\r\n                const modifiers = {\r\n                    $each: query.operands.map(common_1.encodeInternalDataType),\r\n                    $position: 0,\r\n                };\r\n                return {\r\n                    [$op]: {\r\n                        [query.fieldName]: modifiers,\r\n                    },\r\n                };\r\n            }\r\n            case update_1.UPDATE_COMMANDS_LITERAL.POP: {\r\n                return {\r\n                    [$op]: {\r\n                        [query.fieldName]: 1,\r\n                    },\r\n                };\r\n            }\r\n            case update_1.UPDATE_COMMANDS_LITERAL.SHIFT: {\r\n                return {\r\n                    [$op]: {\r\n                        [query.fieldName]: -1,\r\n                    },\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    [$op]: {\r\n                        [query.fieldName]: common_1.encodeInternalDataType(query.operands),\r\n                    },\r\n                };\r\n            }\r\n        }\r\n    }\r\n    encodeUpdateObject(query) {\r\n        const flattened = common_1.flattenQueryObject(query);\r\n        for (const key in flattened) {\r\n            if (/^\\$/.test(key))\r\n                continue;\r\n            let val = flattened[key];\r\n            if (update_1.isUpdateCommand(val)) {\r\n                flattened[key] = val._setFieldName(key);\r\n                const condition = this.encodeUpdateCommand(flattened[key]);\r\n                common_1.mergeConditionAfterEncode(flattened, condition, key);\r\n            }\r\n            else {\r\n                flattened[key] = val = common_1.encodeInternalDataType(val);\r\n                const $setCommand = new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SET, [val], key);\r\n                const condition = this.encodeUpdateCommand($setCommand);\r\n                common_1.mergeConditionAfterEncode(flattened, condition, key);\r\n            }\r\n        }\r\n        return flattened;\r\n    }\r\n}\r\nexports.UpdateSerializer = UpdateSerializer;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nexports.SET = 'set';\r\nexports.REMOVE = 'remove';\r\nexports.INC = 'inc';\r\nexports.MUL = 'mul';\r\nexports.PUSH = 'push';\r\nexports.POP = 'pop';\r\nexports.SHIFT = 'shift';\r\nexports.UNSHIFT = 'unshift';\r\nvar UPDATE_COMMANDS_LITERAL;\r\n(function (UPDATE_COMMANDS_LITERAL) {\r\n    UPDATE_COMMANDS_LITERAL[\"SET\"] = \"set\";\r\n    UPDATE_COMMANDS_LITERAL[\"REMOVE\"] = \"remove\";\r\n    UPDATE_COMMANDS_LITERAL[\"INC\"] = \"inc\";\r\n    UPDATE_COMMANDS_LITERAL[\"MUL\"] = \"mul\";\r\n    UPDATE_COMMANDS_LITERAL[\"PUSH\"] = \"push\";\r\n    UPDATE_COMMANDS_LITERAL[\"POP\"] = \"pop\";\r\n    UPDATE_COMMANDS_LITERAL[\"SHIFT\"] = \"shift\";\r\n    UPDATE_COMMANDS_LITERAL[\"UNSHIFT\"] = \"unshift\";\r\n})(UPDATE_COMMANDS_LITERAL = exports.UPDATE_COMMANDS_LITERAL || (exports.UPDATE_COMMANDS_LITERAL = {}));\r\nclass UpdateCommand {\r\n    constructor(operator, operands, fieldName) {\r\n        this._internalType = symbol_1.SYMBOL_UPDATE_COMMAND;\r\n        Object.defineProperties(this, {\r\n            _internalType: {\r\n                enumerable: false,\r\n                configurable: false,\r\n            },\r\n        });\r\n        this.operator = operator;\r\n        this.operands = operands;\r\n        this.fieldName = fieldName || symbol_1.SYMBOL_UNSET_FIELD_NAME;\r\n    }\r\n    _setFieldName(fieldName) {\r\n        const command = new UpdateCommand(this.operator, this.operands, fieldName);\r\n        return command;\r\n    }\r\n}\r\nexports.UpdateCommand = UpdateCommand;\r\nfunction isUpdateCommand(object) {\r\n    return object && (object instanceof UpdateCommand) && (object._internalType === symbol_1.SYMBOL_UPDATE_COMMAND);\r\n}\r\nexports.isUpdateCommand = isUpdateCommand;\r\nfunction isKnownUpdateCommand(object) {\r\n    return isUpdateCommand(object) && (object.operator.toUpperCase() in UPDATE_COMMANDS_LITERAL);\r\n}\r\nexports.isKnownUpdateCommand = isKnownUpdateCommand;\r\nexports.default = UpdateCommand;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst query_1 = require(\"./commands/query\");\r\nconst logic_1 = require(\"./commands/logic\");\r\nconst update_1 = require(\"./commands/update\");\r\nexports.OperatorMap = {};\r\nfor (const key in query_1.QUERY_COMMANDS_LITERAL) {\r\n    exports.OperatorMap[key] = `$${key.toLowerCase()}`;\r\n}\r\nfor (const key in logic_1.LOGIC_COMMANDS_LITERAL) {\r\n    exports.OperatorMap[key] = `$${key.toLowerCase()}`;\r\n}\r\nfor (const key in update_1.UPDATE_COMMANDS_LITERAL) {\r\n    exports.OperatorMap[key] = `$${key.toLowerCase()}`;\r\n}\r\nexports.OperatorMap[query_1.QUERY_COMMANDS_LITERAL.NEQ] = '$ne';\r\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.REMOVE] = '$unset';\r\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.SHIFT] = '$pop';\r\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT] = '$push';\r\nfunction operatorToString(operator) {\r\n    return exports.OperatorMap[operator] || `$${operator.toLowerCase()}`;\r\n}\r\nexports.operatorToString = operatorToString;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst logic_1 = require(\"./logic\");\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst geo_1 = require(\"../geo\");\r\nconst type_1 = require(\"../utils/type\");\r\nexports.EQ = 'eq';\r\nexports.NEQ = 'neq';\r\nexports.GT = 'gt';\r\nexports.GTE = 'gte';\r\nexports.LT = 'lt';\r\nexports.LTE = 'lte';\r\nexports.IN = 'in';\r\nexports.NIN = 'nin';\r\nvar QUERY_COMMANDS_LITERAL;\r\n(function (QUERY_COMMANDS_LITERAL) {\r\n    QUERY_COMMANDS_LITERAL[\"EQ\"] = \"eq\";\r\n    QUERY_COMMANDS_LITERAL[\"NEQ\"] = \"neq\";\r\n    QUERY_COMMANDS_LITERAL[\"GT\"] = \"gt\";\r\n    QUERY_COMMANDS_LITERAL[\"GTE\"] = \"gte\";\r\n    QUERY_COMMANDS_LITERAL[\"LT\"] = \"lt\";\r\n    QUERY_COMMANDS_LITERAL[\"LTE\"] = \"lte\";\r\n    QUERY_COMMANDS_LITERAL[\"IN\"] = \"in\";\r\n    QUERY_COMMANDS_LITERAL[\"NIN\"] = \"nin\";\r\n    QUERY_COMMANDS_LITERAL[\"GEO_NEAR\"] = \"geoNear\";\r\n    QUERY_COMMANDS_LITERAL[\"GEO_WITHIN\"] = \"geoWithin\";\r\n    QUERY_COMMANDS_LITERAL[\"GEO_INTERSECTS\"] = \"geoIntersects\";\r\n})(QUERY_COMMANDS_LITERAL = exports.QUERY_COMMANDS_LITERAL || (exports.QUERY_COMMANDS_LITERAL = {}));\r\nclass QueryCommand extends logic_1.LogicCommand {\r\n    constructor(operator, operands, fieldName) {\r\n        super(operator, operands, fieldName);\r\n        this.operator = operator;\r\n        this._internalType = symbol_1.SYMBOL_QUERY_COMMAND;\r\n    }\r\n    _setFieldName(fieldName) {\r\n        const command = new QueryCommand(this.operator, this.operands, fieldName);\r\n        return command;\r\n    }\r\n    eq(val) {\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.EQ, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    neq(val) {\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.NEQ, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    gt(val) {\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.GT, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    gte(val) {\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.GTE, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    lt(val) {\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.LT, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    lte(val) {\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.LTE, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    in(list) {\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.IN, list, this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    nin(list) {\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.NIN, list, this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    geoNear(val) {\r\n        if (!(val.geometry instanceof geo_1.Point)) {\r\n            throw new TypeError(`\"geometry\" must be of type Point. Received type ${typeof val.geometry}`);\r\n        }\r\n        if (val.maxDistance !== undefined && !type_1.isNumber(val.maxDistance)) {\r\n            throw new TypeError(`\"maxDistance\" must be of type Number. Received type ${typeof val.maxDistance}`);\r\n        }\r\n        if (val.minDistance !== undefined && !type_1.isNumber(val.minDistance)) {\r\n            throw new TypeError(`\"minDistance\" must be of type Number. Received type ${typeof val.minDistance}`);\r\n        }\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_NEAR, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    geoWithin(val) {\r\n        if (!(val.geometry instanceof geo_1.MultiPolygon) && !(val.geometry instanceof geo_1.Polygon)) {\r\n            throw new TypeError(`\"geometry\" must be of type Polygon or MultiPolygon. Received type ${typeof val.geometry}`);\r\n        }\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_WITHIN, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n    geoIntersects(val) {\r\n        if (!(val.geometry instanceof geo_1.Point) &&\r\n            !(val.geometry instanceof geo_1.LineString) &&\r\n            !(val.geometry instanceof geo_1.Polygon) &&\r\n            !(val.geometry instanceof geo_1.MultiPoint) &&\r\n            !(val.geometry instanceof geo_1.MultiLineString) &&\r\n            !(val.geometry instanceof geo_1.MultiPolygon)) {\r\n            throw new TypeError(`\"geometry\" must be of type Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon. Received type ${typeof val.geometry}`);\r\n        }\r\n        const command = new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_INTERSECTS, [val], this.fieldName);\r\n        return this.and(command);\r\n    }\r\n}\r\nexports.QueryCommand = QueryCommand;\r\nfunction isQueryCommand(object) {\r\n    return object && (object instanceof QueryCommand) && (object._internalType === symbol_1.SYMBOL_QUERY_COMMAND);\r\n}\r\nexports.isQueryCommand = isQueryCommand;\r\nfunction isKnownQueryCommand(object) {\r\n    return isQueryCommand(object) && (object.operator.toUpperCase() in QUERY_COMMANDS_LITERAL);\r\n}\r\nexports.isKnownQueryCommand = isKnownQueryCommand;\r\nfunction isComparisonCommand(object) {\r\n    return isQueryCommand(object);\r\n}\r\nexports.isComparisonCommand = isComparisonCommand;\r\nexports.default = QueryCommand;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst query_1 = require(\"./query\");\r\nexports.AND = 'and';\r\nexports.OR = 'or';\r\nexports.NOT = 'not';\r\nexports.NOR = 'nor';\r\nvar LOGIC_COMMANDS_LITERAL;\r\n(function (LOGIC_COMMANDS_LITERAL) {\r\n    LOGIC_COMMANDS_LITERAL[\"AND\"] = \"and\";\r\n    LOGIC_COMMANDS_LITERAL[\"OR\"] = \"or\";\r\n    LOGIC_COMMANDS_LITERAL[\"NOT\"] = \"not\";\r\n    LOGIC_COMMANDS_LITERAL[\"NOR\"] = \"nor\";\r\n})(LOGIC_COMMANDS_LITERAL = exports.LOGIC_COMMANDS_LITERAL || (exports.LOGIC_COMMANDS_LITERAL = {}));\r\nclass LogicCommand {\r\n    constructor(operator, operands, fieldName) {\r\n        this._internalType = symbol_1.SYMBOL_LOGIC_COMMAND;\r\n        Object.defineProperties(this, {\r\n            _internalType: {\r\n                enumerable: false,\r\n                configurable: false,\r\n            },\r\n        });\r\n        this.operator = operator;\r\n        this.operands = operands;\r\n        this.fieldName = fieldName || symbol_1.SYMBOL_UNSET_FIELD_NAME;\r\n        if (this.fieldName !== symbol_1.SYMBOL_UNSET_FIELD_NAME) {\r\n            operands = operands.slice();\r\n            this.operands = operands;\r\n            for (let i = 0, len = operands.length; i < len; i++) {\r\n                const query = operands[i];\r\n                if (isLogicCommand(query) || query_1.isQueryCommand(query)) {\r\n                    operands[i] = query._setFieldName(this.fieldName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _setFieldName(fieldName) {\r\n        const operands = this.operands.map(operand => {\r\n            if (operand instanceof LogicCommand) {\r\n                return operand._setFieldName(fieldName);\r\n            }\r\n            else {\r\n                return operand;\r\n            }\r\n        });\r\n        const command = new LogicCommand(this.operator, operands, fieldName);\r\n        return command;\r\n    }\r\n    and(...__expressions__) {\r\n        const expressions = Array.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\r\n        expressions.unshift(this);\r\n        return new LogicCommand(LOGIC_COMMANDS_LITERAL.AND, expressions, this.fieldName);\r\n    }\r\n    or(...__expressions__) {\r\n        const expressions = Array.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\r\n        expressions.unshift(this);\r\n        return new LogicCommand(LOGIC_COMMANDS_LITERAL.OR, expressions, this.fieldName);\r\n    }\r\n}\r\nexports.LogicCommand = LogicCommand;\r\nfunction isLogicCommand(object) {\r\n    return object && (object instanceof LogicCommand) && (object._internalType === symbol_1.SYMBOL_LOGIC_COMMAND);\r\n}\r\nexports.isLogicCommand = isLogicCommand;\r\nfunction isKnownLogicCommand(object) {\r\n    return isLogicCommand && (object.operator.toUpperCase() in LOGIC_COMMANDS_LITERAL);\r\n}\r\nexports.isKnownLogicCommand = isKnownLogicCommand;\r\nexports.default = LogicCommand;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst type_1 = require(\"../utils/type\");\r\nconst datatype_1 = require(\"./datatype\");\r\nfunction flatten(query, shouldPreserverObject, parents, visited) {\r\n    const cloned = Object.assign({}, query);\r\n    for (const key in query) {\r\n        if (/^\\$/.test(key))\r\n            continue;\r\n        const value = query[key];\r\n        if (!value)\r\n            continue;\r\n        if (type_1.isObject(value) && !shouldPreserverObject(value)) {\r\n            if (visited.indexOf(value) > -1) {\r\n                throw new Error(`Cannot convert circular structure to JSON`);\r\n            }\r\n            const newParents = [\r\n                ...parents,\r\n                key,\r\n            ];\r\n            const newVisited = [\r\n                ...visited,\r\n                value,\r\n            ];\r\n            const flattenedChild = flatten(value, shouldPreserverObject, newParents, newVisited);\r\n            cloned[key] = flattenedChild;\r\n            let hasKeyNotCombined = false;\r\n            for (const childKey in flattenedChild) {\r\n                if (!/^\\$/.test(childKey)) {\r\n                    cloned[`${key}.${childKey}`] = flattenedChild[childKey];\r\n                    delete cloned[key][childKey];\r\n                }\r\n                else {\r\n                    hasKeyNotCombined = true;\r\n                }\r\n            }\r\n            if (!hasKeyNotCombined) {\r\n                delete cloned[key];\r\n            }\r\n        }\r\n    }\r\n    return cloned;\r\n}\r\nfunction flattenQueryObject(query) {\r\n    return flatten(query, isConversionRequired, [], [query]);\r\n}\r\nexports.flattenQueryObject = flattenQueryObject;\r\nfunction flattenObject(object) {\r\n    return flatten(object, (_) => false, [], [object]);\r\n}\r\nexports.flattenObject = flattenObject;\r\nfunction mergeConditionAfterEncode(query, condition, key) {\r\n    if (!condition[key]) {\r\n        delete query[key];\r\n    }\r\n    for (const conditionKey in condition) {\r\n        if (query[conditionKey]) {\r\n            if (type_1.isArray(query[conditionKey])) {\r\n                query[conditionKey].push(condition[conditionKey]);\r\n            }\r\n            else if (type_1.isObject(query[conditionKey])) {\r\n                if (type_1.isObject(condition[conditionKey])) {\r\n                    Object.assign(query[conditionKey], condition[conditionKey]);\r\n                }\r\n                else {\r\n                    console.warn(`unmergable condition, query is object but condition is ${type_1.getType(condition)}, can only overwrite`, condition, key);\r\n                    query[conditionKey] = condition[conditionKey];\r\n                }\r\n            }\r\n            else {\r\n                console.warn(`to-merge query is of type ${type_1.getType(query)}, can only overwrite`, query, condition, key);\r\n                query[conditionKey] = condition[conditionKey];\r\n            }\r\n        }\r\n        else {\r\n            query[conditionKey] = condition[conditionKey];\r\n        }\r\n    }\r\n}\r\nexports.mergeConditionAfterEncode = mergeConditionAfterEncode;\r\nfunction isConversionRequired(val) {\r\n    return type_1.isInternalObject(val) || type_1.isDate(val) || type_1.isRegExp(val);\r\n}\r\nexports.isConversionRequired = isConversionRequired;\r\nfunction encodeInternalDataType(val) {\r\n    return datatype_1.serialize(val);\r\n}\r\nexports.encodeInternalDataType = encodeInternalDataType;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst type_1 = require(\"../utils/type\");\r\nfunction serialize(val) {\r\n    return serializeHelper(val, [val]);\r\n}\r\nexports.serialize = serialize;\r\nfunction serializeHelper(val, visited) {\r\n    if (type_1.isInternalObject(val)) {\r\n        switch (val._internalType) {\r\n            case symbol_1.SYMBOL_GEO_POINT: {\r\n                return val.toJSON();\r\n            }\r\n            case symbol_1.SYMBOL_SERVER_DATE: {\r\n                return val.parse();\r\n            }\r\n            case symbol_1.SYMBOL_REGEXP: {\r\n                return val.parse();\r\n            }\r\n            default: {\r\n                return val.toJSON ? val.toJSON() : val;\r\n            }\r\n        }\r\n    }\r\n    else if (type_1.isDate(val)) {\r\n        return {\r\n            $date: +val,\r\n        };\r\n    }\r\n    else if (type_1.isRegExp(val)) {\r\n        return {\r\n            $regex: val.source,\r\n            $options: val.flags,\r\n        };\r\n    }\r\n    else if (type_1.isArray(val)) {\r\n        return val.map(item => {\r\n            if (visited.indexOf(item) > -1) {\r\n                throw new Error(`Cannot convert circular structure to JSON`);\r\n            }\r\n            return serializeHelper(item, [\r\n                ...visited,\r\n                item,\r\n            ]);\r\n        });\r\n    }\r\n    else if (type_1.isObject(val)) {\r\n        const ret = Object.assign({}, val);\r\n        for (const key in ret) {\r\n            if (visited.indexOf(ret[key]) > -1) {\r\n                throw new Error(`Cannot convert circular structure to JSON`);\r\n            }\r\n            ret[key] = serializeHelper(ret[key], [\r\n                ...visited,\r\n                ret[key],\r\n            ]);\r\n        }\r\n        return ret;\r\n    }\r\n    else {\r\n        return val;\r\n    }\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst request_1 = require(\"./request\");\r\nconst validate_1 = require(\"./validate\");\r\nconst util_1 = require(\"./util\");\r\nconst query_1 = require(\"./serializer/query\");\r\nconst update_1 = require(\"./serializer/update\");\r\nclass Query {\r\n    constructor(db, coll, fieldFilters, fieldOrders, queryOptions) {\r\n        this._db = db;\r\n        this._coll = coll;\r\n        this._fieldFilters = fieldFilters;\r\n        this._fieldOrders = fieldOrders || [];\r\n        this._queryOptions = queryOptions || {};\r\n        this._request = new request_1.Request(this._db);\r\n    }\r\n    get() {\r\n        let newOder = [];\r\n        if (this._fieldOrders) {\r\n            this._fieldOrders.forEach(order => {\r\n                newOder.push(order);\r\n            });\r\n        }\r\n        let param = {\r\n            collectionName: this._coll\r\n        };\r\n        if (this._fieldFilters) {\r\n            param.query = this._fieldFilters;\r\n        }\r\n        if (newOder.length > 0) {\r\n            param.order = newOder;\r\n        }\r\n        if (this._queryOptions.offset) {\r\n            param.offset = this._queryOptions.offset;\r\n        }\r\n        if (this._queryOptions.limit) {\r\n            param.limit =\r\n                this._queryOptions.limit < 100 ? this._queryOptions.limit : 100;\r\n        }\r\n        else {\r\n            param.limit = 100;\r\n        }\r\n        if (this._queryOptions.projection) {\r\n            param.projection = this._queryOptions.projection;\r\n        }\r\n        return new Promise(resolve => {\r\n            this._request.send(\"queryDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    const documents = util_1.Util.formatResDocumentData(res.data.list);\r\n                    const result = {\r\n                        data: documents,\r\n                        requestId: res.requestId\r\n                    };\r\n                    if (res.TotalCount)\r\n                        result.total = res.TotalCount;\r\n                    if (res.Limit)\r\n                        result.limit = res.Limit;\r\n                    if (res.Offset)\r\n                        result.offset = res.Offset;\r\n                    resolve(result);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    count() {\r\n        let param = {\r\n            collectionName: this._coll\r\n        };\r\n        if (this._fieldFilters) {\r\n            param.query = this._fieldFilters;\r\n        }\r\n        return new Promise(resolve => {\r\n            this._request.send(\"countDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        requestId: res.requestId,\r\n                        total: res.data.total\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    where(query) {\r\n        return new Query(this._db, this._coll, query_1.QuerySerializer.encode(query), this._fieldOrders, this._queryOptions);\r\n    }\r\n    orderBy(fieldPath, directionStr) {\r\n        validate_1.Validate.isFieldPath(fieldPath);\r\n        validate_1.Validate.isFieldOrder(directionStr);\r\n        const newOrder = {\r\n            field: fieldPath,\r\n            direction: directionStr\r\n        };\r\n        const combinedOrders = this._fieldOrders.concat(newOrder);\r\n        return new Query(this._db, this._coll, this._fieldFilters, combinedOrders, this._queryOptions);\r\n    }\r\n    limit(limit) {\r\n        validate_1.Validate.isInteger(\"limit\", limit);\r\n        let option = Object.assign({}, this._queryOptions);\r\n        option.limit = limit;\r\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\r\n    }\r\n    skip(offset) {\r\n        validate_1.Validate.isInteger(\"offset\", offset);\r\n        let option = Object.assign({}, this._queryOptions);\r\n        option.offset = offset;\r\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\r\n    }\r\n    update(data) {\r\n        if (!data || typeof data !== \"object\") {\r\n            return Promise.resolve({\r\n                code: \"INVALID_PARAM\",\r\n                message: \"参数必需是非空对象\"\r\n            });\r\n        }\r\n        if (data.hasOwnProperty(\"_id\")) {\r\n            return Promise.resolve({\r\n                code: \"INVALID_PARAM\",\r\n                message: \"不能更新_id的值\"\r\n            });\r\n        }\r\n        let param = {\r\n            collectionName: this._coll,\r\n            query: this._fieldFilters,\r\n            multi: true,\r\n            merge: true,\r\n            upsert: false,\r\n            data: update_1.UpdateSerializer.encode(data)\r\n        };\r\n        return new Promise(resolve => {\r\n            this._request.send(\"updateDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        requestId: res.requestId,\r\n                        updated: res.data.updated,\r\n                        upsertId: res.data.upsert_id\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    field(projection) {\r\n        for (let k in projection) {\r\n            if (projection[k]) {\r\n                projection[k] = 1;\r\n            }\r\n            else {\r\n                projection[k] = 0;\r\n            }\r\n        }\r\n        let option = Object.assign({}, this._queryOptions);\r\n        option.projection = projection;\r\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\r\n    }\r\n    remove() {\r\n        if (Object.keys(this._queryOptions).length > 0) {\r\n            console.warn('`offset`, `limit` and `projection` are not supported in remove() operation');\r\n        }\r\n        if (this._fieldOrders.length > 0) {\r\n            console.warn('`orderBy` is not supported in remove() operation');\r\n        }\r\n        const param = {\r\n            collectionName: this._coll,\r\n            query: query_1.QuerySerializer.encode(this._fieldFilters),\r\n            multi: true\r\n        };\r\n        return new Promise(resolve => {\r\n            this._request.send(\"deleteDocument\", param).then(res => {\r\n                if (res.code) {\r\n                    resolve(res);\r\n                }\r\n                else {\r\n                    resolve({\r\n                        requestId: res.requestId,\r\n                        deleted: res.data.deleted\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.Query = Query;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst query_1 = require(\"../commands/query\");\r\nconst logic_1 = require(\"../commands/logic\");\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nconst type_1 = require(\"../utils/type\");\r\nconst operator_map_1 = require(\"../operator-map\");\r\nconst common_1 = require(\"./common\");\r\nclass QuerySerializer {\r\n    constructor() {\r\n    }\r\n    static encode(query) {\r\n        const encoder = new QueryEncoder();\r\n        return encoder.encodeQuery(query);\r\n    }\r\n}\r\nexports.QuerySerializer = QuerySerializer;\r\nclass QueryEncoder {\r\n    encodeQuery(query, key) {\r\n        if (common_1.isConversionRequired(query)) {\r\n            if (logic_1.isLogicCommand(query)) {\r\n                return this.encodeLogicCommand(query);\r\n            }\r\n            else if (query_1.isQueryCommand(query)) {\r\n                return this.encodeQueryCommand(query);\r\n            }\r\n            else {\r\n                return { [key]: this.encodeQueryObject(query) };\r\n            }\r\n        }\r\n        else {\r\n            if (type_1.isObject(query)) {\r\n                return this.encodeQueryObject(query);\r\n            }\r\n            else {\r\n                return query;\r\n            }\r\n        }\r\n    }\r\n    encodeLogicCommand(query) {\r\n        switch (query.operator) {\r\n            case logic_1.LOGIC_COMMANDS_LITERAL.AND:\r\n            case logic_1.LOGIC_COMMANDS_LITERAL.OR: {\r\n                const $op = operator_map_1.operatorToString(query.operator);\r\n                const subqueries = query.operands.map((oprand) => this.encodeQuery(oprand, query.fieldName));\r\n                return {\r\n                    [$op]: subqueries,\r\n                };\r\n            }\r\n            default: {\r\n                const $op = operator_map_1.operatorToString(query.operator);\r\n                if (query.operands.length === 1) {\r\n                    const subquery = this.encodeQuery(query.operands[0]);\r\n                    return {\r\n                        [$op]: subquery,\r\n                    };\r\n                }\r\n                else {\r\n                    const subqueries = query.operands.map(this.encodeQuery.bind(this));\r\n                    return {\r\n                        [$op]: subqueries,\r\n                    };\r\n                }\r\n            }\r\n        }\r\n    }\r\n    encodeQueryCommand(query) {\r\n        if (query_1.isComparisonCommand(query)) {\r\n            return this.encodeComparisonCommand(query);\r\n        }\r\n        else {\r\n            return this.encodeComparisonCommand(query);\r\n        }\r\n    }\r\n    encodeComparisonCommand(query) {\r\n        if (query.fieldName === symbol_1.SYMBOL_UNSET_FIELD_NAME) {\r\n            throw new Error(`Cannot encode a comparison command with unset field name`);\r\n        }\r\n        const $op = operator_map_1.operatorToString(query.operator);\r\n        switch (query.operator) {\r\n            case query_1.QUERY_COMMANDS_LITERAL.EQ:\r\n            case query_1.QUERY_COMMANDS_LITERAL.NEQ:\r\n            case query_1.QUERY_COMMANDS_LITERAL.LT:\r\n            case query_1.QUERY_COMMANDS_LITERAL.LTE:\r\n            case query_1.QUERY_COMMANDS_LITERAL.GT:\r\n            case query_1.QUERY_COMMANDS_LITERAL.GTE: {\r\n                return {\r\n                    [query.fieldName]: {\r\n                        [$op]: common_1.encodeInternalDataType(query.operands[0]),\r\n                    },\r\n                };\r\n            }\r\n            case query_1.QUERY_COMMANDS_LITERAL.IN:\r\n            case query_1.QUERY_COMMANDS_LITERAL.NIN: {\r\n                return {\r\n                    [query.fieldName]: {\r\n                        [$op]: common_1.encodeInternalDataType(query.operands),\r\n                    },\r\n                };\r\n            }\r\n            case query_1.QUERY_COMMANDS_LITERAL.GEO_NEAR: {\r\n                const options = query.operands[0];\r\n                return {\r\n                    [query.fieldName]: {\r\n                        $nearSphere: {\r\n                            $geometry: options.geometry.toJSON(),\r\n                            $maxDistance: options.maxDistance,\r\n                            $minDistance: options.minDistance\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            case query_1.QUERY_COMMANDS_LITERAL.GEO_WITHIN: {\r\n                const options = query.operands[0];\r\n                return {\r\n                    [query.fieldName]: {\r\n                        $geoWithin: {\r\n                            $geometry: options.geometry.toJSON()\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            case query_1.QUERY_COMMANDS_LITERAL.GEO_INTERSECTS: {\r\n                const options = query.operands[0];\r\n                return {\r\n                    [query.fieldName]: {\r\n                        $geoIntersects: {\r\n                            $geometry: options.geometry.toJSON()\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            default: {\r\n                return {\r\n                    [query.fieldName]: {\r\n                        [$op]: common_1.encodeInternalDataType(query.operands[0]),\r\n                    },\r\n                };\r\n            }\r\n        }\r\n    }\r\n    encodeQueryObject(query) {\r\n        const flattened = common_1.flattenQueryObject(query);\r\n        for (const key in flattened) {\r\n            const val = flattened[key];\r\n            if (logic_1.isLogicCommand(val)) {\r\n                flattened[key] = val._setFieldName(key);\r\n                const condition = this.encodeLogicCommand(flattened[key]);\r\n                this.mergeConditionAfterEncode(flattened, condition, key);\r\n            }\r\n            else if (query_1.isComparisonCommand(val)) {\r\n                flattened[key] = val._setFieldName(key);\r\n                const condition = this.encodeComparisonCommand(flattened[key]);\r\n                this.mergeConditionAfterEncode(flattened, condition, key);\r\n            }\r\n            else if (common_1.isConversionRequired(val)) {\r\n                flattened[key] = common_1.encodeInternalDataType(val);\r\n            }\r\n        }\r\n        return flattened;\r\n    }\r\n    mergeConditionAfterEncode(query, condition, key) {\r\n        if (!condition[key]) {\r\n            delete query[key];\r\n        }\r\n        for (const conditionKey in condition) {\r\n            if (query[conditionKey]) {\r\n                if (type_1.isArray(query[conditionKey])) {\r\n                    query[conditionKey].push(condition[conditionKey]);\r\n                }\r\n                else if (type_1.isObject(query[conditionKey])) {\r\n                    if (type_1.isObject(condition[conditionKey])) {\r\n                        Object.assign(query, condition);\r\n                    }\r\n                    else {\r\n                        console.warn(`unmergable condition, query is object but condition is ${type_1.getType(condition)}, can only overwrite`, condition, key);\r\n                        query[conditionKey] = condition[conditionKey];\r\n                    }\r\n                }\r\n                else {\r\n                    console.warn(`to-merge query is of type ${type_1.getType(query)}, can only overwrite`, query, condition, key);\r\n                    query[conditionKey] = condition[conditionKey];\r\n                }\r\n            }\r\n            else {\r\n                query[conditionKey] = condition[conditionKey];\r\n            }\r\n        }\r\n    }\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst query_1 = require(\"./commands/query\");\r\nconst logic_1 = require(\"./commands/logic\");\r\nconst update_1 = require(\"./commands/update\");\r\nconst type_1 = require(\"./utils/type\");\r\nexports.Command = {\r\n    eq(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.EQ, [val]);\r\n    },\r\n    neq(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.NEQ, [val]);\r\n    },\r\n    lt(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.LT, [val]);\r\n    },\r\n    lte(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.LTE, [val]);\r\n    },\r\n    gt(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GT, [val]);\r\n    },\r\n    gte(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GTE, [val]);\r\n    },\r\n    in(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.IN, val);\r\n    },\r\n    nin(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.NIN, val);\r\n    },\r\n    geoNear(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GEO_NEAR, [val]);\r\n    },\r\n    geoWithin(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GEO_WITHIN, [val]);\r\n    },\r\n    geoIntersects(val) {\r\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GEO_INTERSECTS, [val]);\r\n    },\r\n    and(...__expressions__) {\r\n        const expressions = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\r\n        return new logic_1.LogicCommand(logic_1.LOGIC_COMMANDS_LITERAL.AND, expressions);\r\n    },\r\n    or(...__expressions__) {\r\n        const expressions = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\r\n        return new logic_1.LogicCommand(logic_1.LOGIC_COMMANDS_LITERAL.OR, expressions);\r\n    },\r\n    set(val) {\r\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SET, [val]);\r\n    },\r\n    remove() {\r\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.REMOVE, []);\r\n    },\r\n    inc(val) {\r\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.INC, [val]);\r\n    },\r\n    mul(val) {\r\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.MUL, [val]);\r\n    },\r\n    push(...__values__) {\r\n        const values = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\r\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.PUSH, values);\r\n    },\r\n    pop() {\r\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.POP, []);\r\n    },\r\n    shift() {\r\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SHIFT, []);\r\n    },\r\n    unshift(...__values__) {\r\n        const values = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\r\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT, values);\r\n    },\r\n};\r\nexports.default = exports.Command;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst symbol_1 = require(\"../helper/symbol\");\r\nclass RegExp {\r\n    constructor({ regexp, options }) {\r\n        if (!regexp) {\r\n            throw new TypeError(\"regexp must be a string\");\r\n        }\r\n        this.$regex = regexp;\r\n        this.$options = options;\r\n    }\r\n    parse() {\r\n        return {\r\n            $regex: this.$regex,\r\n            $options: this.$options\r\n        };\r\n    }\r\n    get _internalType() {\r\n        return symbol_1.SYMBOL_REGEXP;\r\n    }\r\n}\r\nexports.RegExp = RegExp;\r\nfunction RegExpConstructor(param) {\r\n    return new RegExp(param);\r\n}\r\nexports.RegExpConstructor = RegExpConstructor;\r\n","const httpRequest = require(\"../utils/httpRequest\");\r\n\r\n/**\r\n * 调用云函数\r\n * @param {String} name  函数名\r\n * @param {Object} functionParam 函数参数\r\n * @return {Promise}\r\n */\r\nfunction callFunction({ name, data }) {\r\n  try {\r\n    data = data ? JSON.stringify(data) : \"\";\r\n  } catch (e) {\r\n    return Promise.reject(e);\r\n  }\r\n  if (!name) {\r\n    return Promise.reject(\r\n      new Error({\r\n        message: \"函数名不能为空\"\r\n      })\r\n    );\r\n  }\r\n\r\n  const wxCloudApiToken = process.env.WX_API_TOKEN || \"\";\r\n\r\n  let params = {\r\n    action: \"functions.invokeFunction\",\r\n    function_name: name,\r\n    request_data: data,\r\n    wxCloudApiToken\r\n  };\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  }).then(res => {\r\n    // console.log(res);\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      let result = res.data.response_data;\r\n      try {\r\n        result = JSON.parse(res.data.response_data);\r\n      } catch (e) {}\r\n      return {\r\n        result,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nexports.callFunction = callFunction;\r\n","const httpRequest = require(\"../utils/httpRequest\");\r\n\r\nexports.callWxOpenApi = function({ apiName, requestData } = {}) {\r\n  try {\r\n    requestData = requestData ? JSON.stringify(requestData) : \"\";\r\n  } catch (e) {\r\n    throw Error(e);\r\n  }\r\n\r\n  const wxCloudApiToken = process.env.WX_API_TOKEN || \"\";\r\n\r\n  let params = {\r\n    action: \"wx.api\",\r\n    apiName,\r\n    requestData,\r\n    wxCloudApiToken\r\n  };\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  }).then(res => {\r\n    if (res.code) {\r\n      return res;\r\n    } else {\r\n      let result = res.data.responseData;\r\n      try {\r\n        result = JSON.parse(res.data.responseData);\r\n      } catch (e) {}\r\n      return {\r\n        result,\r\n        requestId: res.requestId\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * 调用wxopenAPi\r\n * @param {String} apiName  接口名\r\n * @param {Buffer} requestData\r\n * @return {Promise} 正常内容为buffer，报错为json {code:'', message:'', resquestId:''}\r\n */\r\nexports.callCompatibleWxOpenApi = function({ apiName, requestData } = {}) {\r\n  const wxCloudApiToken = process.env.WX_API_TOKEN || \"\";\r\n\r\n  let params = {\r\n    action: \"wx.openApi\",\r\n    apiName,\r\n    requestData,\r\n    wxCloudApiToken\r\n  };\r\n\r\n  return httpRequest({\r\n    config: this.config,\r\n    params,\r\n    method: \"post\",\r\n    headers: {}\r\n  }).then(res => res);\r\n};\r\n"]}